[project]
name = "keycardai-oauth"
version = "0.0.1"
description = "A Python SDK for OAuth 2.0 functionality implementing multiple OAuth 2.0 standards"
readme = "README.md"
requires-python = ">=3.10"
license = { text = "MIT" }
authors = [{ name = "KeyCard AI", email = "support@keycard.ai" }]
dependencies = [
    "pydantic>=2.11.7",
]
keywords = ["oauth", "oauth2", "authentication", "tokens", "security"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Operating System :: OS Independent",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Security",
    "Topic :: Internet :: WWW/HTTP :: Session",
    "License :: OSI Approved :: MIT License",
]

[project.urls]
Homepage = "https://github.com/keycardai/python-sdk"
Repository = "https://github.com/keycardai/python-sdk"
Documentation = "https://docs.keycardai.com"
Issues = "https://github.com/keycardai/python-sdk/issues"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["src/keycardai"]

[tool.ruff]
line-length = 88
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, we'll handle case by case
]
isort = { combine-as-imports = true, known-first-party = ["keycardai"] }

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = ["T20"]

[tool.mypy]
strict = true
disallow_incomplete_defs = false
disallow_untyped_defs = false
disallow_untyped_calls = false

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

[tool.coverage.run]
source = ["tests", "src/keycardai"]

[tool.coverage.report]
show_missing = true
exclude_also = [
    "pragma: no cover",
    "if TYPE_CHECKING:",
    "@abc.abstractmethod",
    "raise NotImplementedError",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
addopts = "-ra -q"
