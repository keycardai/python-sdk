[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "keycardai-oauth-calendar-example"
version = "0.1.0"
description = "Google Calendar MCP Server with Delegated Token Exchange using KeyCard OAuth SDK"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "KeyCard AI"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Security",
]
requires-python = ">=3.9"
dependencies = [
    # KeyCard OAuth SDK - Unified OAuth 2.0 client (when available)
    # "keycardai-oauth>=1.0.0",
    
    # FastMCP - Model Context Protocol server framework (when available)
    # "fastmcp>=1.0.0",
    
    # Core dependencies for demonstration
    "pydantic>=2.0.0",
    "starlette>=0.27.0",
    "httpx>=0.24.0",
    
    # Configuration management
    "python-dotenv>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "mypy>=1.0.0",
    "ruff>=0.1.0",
]

[project.urls]
Homepage = "https://github.com/keycardai/python-oauth-sdk"
Documentation = "https://github.com/keycardai/python-oauth-sdk/tree/main/examples/delegated_token_exchange"
Repository = "https://github.com/keycardai/python-oauth-sdk"
Issues = "https://github.com/keycardai/python-oauth-sdk/issues"

[project.scripts]
mcp-calendar-server = "delegated_token_exchange.server:main"

[tool.hatch.build.targets.wheel]
packages = ["src/delegated_token_exchange"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/README.md",
    "/LICENSE",
]

# Black configuration
[tool.black]
line-length = 100
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration  
[tool.isort]
profile = "black"
line_length = 100

# Ruff configuration
[tool.ruff]
line-length = 100
target-version = "py39"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501", # line too long, handled by black
    "B008", # do not perform function calls in argument defaults
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

# MyPy configuration
[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
