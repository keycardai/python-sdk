#!/usr/bin/env python3
"""
PR comment management for release previews.

This script creates or updates PR comments with release preview information
when changes are detected in the monorepo using the GitHub CLI (gh).

Usage:
  python scripts/pr_comment.py [--pr-number PR_NUMBER]

Environment Variables:
  GITHUB_TOKEN - GitHub token for API access (used by gh CLI)
  GH_REPO - Repository in format owner/repo (used by gh CLI)
  PR_NUMBER - Pull request number
"""

import argparse
import json
import os
import subprocess
import sys
import tempfile
from pathlib import Path


def run_command(cmd: list[str], cwd: str | None = None) -> tuple[int, str, str]:
    """Run a command and return exit code, stdout, stderr."""
    try:
        result = subprocess.run(
            cmd, capture_output=True, text=True, cwd=cwd
        )
        return result.returncode, result.stdout.strip(), result.stderr.strip()
    except Exception as e:
        return 1, "", str(e)


def check_gh_cli() -> bool:
    """Check if gh CLI is available."""
    exit_code, _, _ = run_command(["gh", "--version"])
    return exit_code == 0


def get_existing_comment_id(pr_number: int) -> str | None:
    """Find existing release preview comment ID using gh CLI."""
    cmd = ["gh", "pr", "view", str(pr_number), "--json", "comments"]

    exit_code, stdout, stderr = run_command(cmd)

    if exit_code != 0:
        raise Exception(f"Failed to get PR comments: {stderr}")

    try:
        pr_data = json.loads(stdout)
        comments = pr_data.get("comments", [])

        # Look for comments with our signature
        for comment in comments:
            if "This comment was automatically generated by the release preview workflow" in comment.get("body", ""):
                return comment.get("id")

        return None
    except json.JSONDecodeError as e:
        raise Exception(f"Failed to parse PR comments JSON: {e}") from e


def get_release_preview() -> str:
    """Get the release preview using the version preview script."""
    exit_code, stdout, stderr = run_command([
        "uv", "run", "python", "scripts/version_preview.py", "--format", "github-summary"
    ])

    if exit_code != 0:
        raise Exception(f"Failed to get release preview: {stderr}")

    return stdout


def get_changelog_preview() -> str:
    """Get the changelog preview using just command."""
    exit_code, stdout, stderr = run_command([
        "just", "preview-changelog"
    ])

    if exit_code != 0:
        raise Exception(f"Failed to get changelog preview: {stderr}")

    return stdout


def has_changes() -> bool:
    """Check if there are any packages with changes."""
    exit_code, stdout, stderr = run_command([
        "uv", "run", "python", "scripts/version_preview.py", "--format", "json"
    ])

    if exit_code != 0:
        return False

    try:
        changes = json.loads(stdout)
        return len(changes) > 0
    except json.JSONDecodeError:
        return False


def create_comment_body() -> str:
    """Create the full comment body with release preview and changelog."""
    release_preview = get_release_preview()
    changelog_preview = get_changelog_preview()

    return f"""{release_preview}

### 📝 Changelog Preview

```
{changelog_preview}
```

---
*This comment was automatically generated by the release preview workflow.*"""


def create_or_update_comment(pr_number: int, comment_body: str) -> None:
    """Create a new comment or update existing one using gh CLI."""
    if not check_gh_cli():
        raise Exception("gh CLI is not available. Please install GitHub CLI.")

    # Create temporary file with comment body
    with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
        f.write(comment_body)
        temp_file = f.name

    try:
        # Check if we have an existing comment to update
        existing_comment_id = get_existing_comment_id(pr_number)

        if existing_comment_id:
            # Update existing comment
            cmd = ["gh", "api", f"repos/{{owner}}/{{repo}}/issues/comments/{existing_comment_id}",
                   "--method", "PATCH", "--field", f"body=@{temp_file}"]

            exit_code, stdout, stderr = run_command(cmd)

            if exit_code != 0:
                raise Exception(f"Failed to update comment: {stderr}")

            print(f"Updated existing comment {existing_comment_id}")
        else:
            # Create new comment using gh pr comment
            cmd = ["gh", "pr", "comment", str(pr_number), "--body-file", temp_file]

            exit_code, stdout, stderr = run_command(cmd)

            if exit_code != 0:
                raise Exception(f"Failed to create comment: {stderr}")

            print("Created new comment")
    finally:
        # Clean up temporary file
        try:
            Path(temp_file).unlink()
        except Exception:
            pass  # Ignore cleanup errors


def main():
    """Main function with argument parsing."""
    parser = argparse.ArgumentParser(
        description="Create or update PR comment with release preview"
    )
    parser.add_argument(
        "--pr-number",
        type=int,
        help="Pull request number (can also use PR_NUMBER env var)"
    )

    args = parser.parse_args()

    # Get configuration from args or environment
    pr_number = args.pr_number or os.getenv("PR_NUMBER")

    if not pr_number:
        print("Error: PR number not provided via --pr-number or PR_NUMBER env var", file=sys.stderr)
        sys.exit(1)

    try:
        # Check if there are any changes
        if not has_changes():
            print("No changes detected, skipping PR comment")
            return

        # Create comment body
        comment_body = create_comment_body()

        # Create or update comment
        create_or_update_comment(int(pr_number), comment_body)

    except Exception as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
